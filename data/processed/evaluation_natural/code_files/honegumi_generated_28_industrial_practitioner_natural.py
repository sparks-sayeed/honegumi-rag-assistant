# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


# Problem: Optimize extraction efficiency by tuning temperature and solvent-to-feed ratio.
# We simulate a realistic evaluation function with noise; replace with real measurements when integrating.

objective_name = "extraction_efficiency_percent"

# Search space bounds (adjust if your process uses different ranges)
TEMPERATURE_MIN_C = 20.0
TEMPERATURE_MAX_C = 80.0
SOLVENT_TO_FEED_MIN = 0.2   # dimensionless volume or mass ratio
SOLVENT_TO_FEED_MAX = 5.0   # dimensionless volume or mass ratio

# Reproducibility for the synthetic noise model
_rng = np.random.default_rng(seed=42)


def evaluate_extraction_run(temperature_celsius: float, solvent_to_feed_ratio: float) -> dict:
    """
    Evaluate the extraction run and return measured extraction efficiency in percent.

    TODO: Replace this stub with actual measurement logic, e.g.:
      - Run the physical extraction at (temperature_celsius, solvent_to_feed_ratio)
      - Quantify extract concentration and compute efficiency (%)
      - Return: {"extraction_efficiency_percent": measured_value}

    The current implementation emulates plausible extraction behavior:
      - Gaussian-like temperature optimum around ~58 C
      - Saturating benefit with solvent_to_feed_ratio
      - Slight degradation penalty above ~70 C
      - Additive Gaussian measurement noise (sigma ~ 1.5 %)
    """
    # Temperature effect (peak near 58 C)
    temp_opt_c = 58.0
    temp_width = 12.0
    temp_component = np.exp(-((temperature_celsius - temp_opt_c) / temp_width) ** 2)

    # Solvent ratio effect (saturating)
    ratio_component = 1.0 - np.exp(-0.8 * solvent_to_feed_ratio)

    # Mild thermal degradation penalty at very high temperatures
    overheat = max(0.0, temperature_celsius - 70.0)
    degradation_factor = max(0.7, 1.0 - 0.002 * (overheat ** 2))

    # Combine components into a percent efficiency (0-100)
    base_scale = 95.0
    efficiency = base_scale * (0.3 + 0.7 * temp_component) * ratio_component * degradation_factor

    # Add measurement noise (simulate a noisy objective)
    noise_sd = 1.5
    efficiency_noisy = float(efficiency + _rng.normal(0.0, noise_sd))

    # Clamp to [0, 100]
    efficiency_noisy = float(np.clip(efficiency_noisy, 0.0, 100.0))

    return {objective_name: efficiency_noisy}


ax_client = AxClient()

ax_client.create_experiment(
    name="extraction_optimization",
    parameters=[
        {"name": "temperature_celsius", "type": "range", "bounds": [TEMPERATURE_MIN_C, TEMPERATURE_MAX_C]},
        {"name": "solvent_to_feed_ratio", "type": "range", "bounds": [SOLVENT_TO_FEED_MIN, SOLVENT_TO_FEED_MAX]},
    ],
    objectives={
        objective_name: ObjectiveProperties(minimize=False),
    },
)

# Total experimental budget
total_trials = 26

for _ in range(total_trials):
    parameterization, trial_index = ax_client.get_next_trial()

    # Extract parameters
    temperature_celsius = float(parameterization["temperature_celsius"])
    solvent_to_feed_ratio = float(parameterization["solvent_to_feed_ratio"])

    # Run experiment (currently simulated)
    results = evaluate_extraction_run(temperature_celsius, solvent_to_feed_ratio)

    # Report results back to Ax
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

best_parameters, best_values = ax_client.get_best_parameters()

print("Best settings found:")
print(best_parameters)
print("Best objective value:")
print(best_values)

# Plot results over trials
objective_names = ax_client.objective_names
df = ax_client.get_trials_data_frame()

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
ax.scatter(df.index, df[objective_names[0]], ec="k", fc="none", label="Observed")
ax.plot(
    df.index,
    np.maximum.accumulate(df[objective_names[0]]),
    color="#0033FF",
    lw=2,
    label="Best to Trial",
)
ax.set_xlabel("Trial Number")
ax.set_ylabel(objective_names[0])
ax.set_title("Extraction Efficiency over Trials")
ax.legend()
plt.tight_layout()
plt.show()

# 2D scatter in parameter space colored by efficiency
fig2, ax2 = plt.subplots(figsize=(6, 5), dpi=150)
sc = ax2.scatter(
    df["parameters.temperature_celsius"],
    df["parameters.solvent_to_feed_ratio"],
    c=df[objective_names[0]],
    cmap="viridis",
    ec="k",
)
ax2.set_xlabel("Temperature (C)")
ax2.set_ylabel("Solvent-to-Feed Ratio (dimensionless)")
ax2.set_title("Parameter Space Exploration")
cb = plt.colorbar(sc, ax=ax2)
cb.set_label("Extraction Efficiency (%)")

# Mark best point if available
best_temp = best_parameters.get("temperature_celsius", None)
best_ratio = best_parameters.get("solvent_to_feed_ratio", None)
if best_temp is not None and best_ratio is not None:
    ax2.scatter([best_temp], [best_ratio], c="red", s=80, marker="*", label="Best", zorder=3)
    ax2.legend()

plt.tight_layout()
plt.show()
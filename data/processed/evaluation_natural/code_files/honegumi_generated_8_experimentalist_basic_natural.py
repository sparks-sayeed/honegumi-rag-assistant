# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


# Domain: Optimize bioreactor conditions (temperature, pH, agitation) to maximize protein titer (g/L)
titer_metric_name = "titer_g_per_L"


def simulate_bioreactor_titer(
    temperature_celsius: float,
    ph: float,
    agitation_rpm: float,
    seed: int,
) -> float:
    """
    Simulate protein titer (g/L) under given bioreactor conditions.
    This is a realistic stub capturing typical bioprocess trends.

    TODO: Replace this simulation with actual experimental measurement:
      - Run a fermentation batch at the specified conditions
      - Measure protein titer (g/L) from HPLC/ELISA or assay
      - Return the measured titer and an estimated SEM from replicate batches

    Model notes:
      - Temperature: bell-shaped around an optimal temp (e.g., mid-30s C)
      - pH: bell-shaped around neutral pH ~7.0
      - Agitation: saturating oxygen transfer with diminishing returns
      - Mild interaction and noise included to emulate real experiments
    """
    rng = np.random.default_rng(seed)

    # Temperature effect (Gaussian around optimum)
    t_opt = 34.0  # degC
    t_sd = 3.0
    temp_factor = np.exp(-0.5 * ((temperature_celsius - t_opt) / t_sd) ** 2)

    # pH effect (Gaussian around neutral)
    ph_opt = 7.0
    ph_sd = 0.5
    ph_factor = np.exp(-0.5 * ((ph - ph_opt) / ph_sd) ** 2)

    # Agitation -> oxygen transfer (saturating)
    k_oxygen = 300.0  # rpm, half-saturation
    o2_factor = agitation_rpm / (agitation_rpm + k_oxygen)
    o2_factor = min(1.0, 1.2 * o2_factor)  # slight boost for good mixing

    # Mild shear penalty at very high agitation
    shear_penalty = np.exp(-0.5 * ((agitation_rpm - 800.0) / 500.0) ** 2)

    # Mild temperatureâ€“oxygen interaction (higher temp slightly increases O2 demand)
    interaction = 1.0 - 0.08 * max(0.0, (temperature_celsius - t_opt) / 8.0)
    interaction = max(0.85, interaction)

    base_max_titer = 20.0  # g/L, nominal achievable titer
    mean_titer = base_max_titer * temp_factor * ph_factor * o2_factor * shear_penalty * interaction

    # Add heteroscedastic noise
    noise_sd = 0.4 + 0.05 * mean_titer
    measured_titer = max(0.0, mean_titer + rng.normal(0.0, noise_sd))

    return float(measured_titer)


ax_client = AxClient()

ax_client.create_experiment(
    name="bioreactor_protein_titer_optimization",
    parameters=[
        {
            "name": "temperature_celsius",
            "type": "range",
            "bounds": [20.0, 42.0],  # degC
        },
        {
            "name": "pH",
            "type": "range",
            "bounds": [6.0, 8.0],
        },
        {
            "name": "agitation_rpm",
            "type": "range",
            "bounds": [200.0, 1000.0],  # rpm
        },
    ],
    objectives={
        titer_metric_name: ObjectiveProperties(minimize=False),
    },
)


# Budget: 30 sequential batches
num_trials = 30

for i in range(num_trials):
    parameterization, trial_index = ax_client.get_next_trial()

    temperature_celsius = float(parameterization["temperature_celsius"])
    ph = float(parameterization["pH"])
    agitation_rpm = float(parameterization["agitation_rpm"])

    try:
        # Reproducible per-trial stochastic noise using trial_index as seed proxy
        titer = simulate_bioreactor_titer(
            temperature_celsius=temperature_celsius,
            ph=ph,
            agitation_rpm=agitation_rpm,
            seed=int(trial_index) + 12345,
        )

        # Report mean and SEM (noise model enabled)
        sem_g_per_L = 0.5  # Example SEM; replace with replicate-based estimate if available
        ax_client.complete_trial(
            trial_index=trial_index,
            raw_data={titer_metric_name: (titer, sem_g_per_L)},
        )
    except Exception as e:
        ax_client.log_trial_failure(trial_index=trial_index)


best_parameters, best_metrics = ax_client.get_best_parameters()
print("Best conditions found:")
print(best_parameters)
print("Best metric estimates:")
print(best_metrics)


# Plot results
objective_name = ax_client.objective_names[0]
df = ax_client.get_trials_data_frame()

# Filter to completed trials with metric values
df_plot = df[pd.to_numeric(df[objective_name], errors="coerce").notnull()].copy()
y = df_plot[objective_name].values
x = df_plot.index.values

fig, ax = plt.subplots(figsize=(7, 4), dpi=150)
ax.scatter(x, y, ec="k", fc="none", label="Observed titer")
ax.plot(x, np.maximum.accumulate(y), color="#0033FF", lw=2, label="Best so far")
ax.set_xlabel("Trial Number")
ax.set_ylabel("Protein titer (g/L)")
ax.set_title("Bioreactor Optimization: Titer over Trials")
ax.legend()
plt.tight_layout()
plt.show()
# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


# Domain-specific objective and parameters for optimizing photovoltaic process conditions.
# We aim to maximize photovoltaic efficiency (%) by tuning:
# - annealing_temperature_c (Celsius): post-deposition anneal temperature
# - deposition_rate_nm_s (nm/s): thin-film deposition rate
#
# This script plans and optimizes 25 trials using Bayesian optimization (Ax Platform).
# The evaluation function below simulates a realistic, noisy response surface.
# Replace the simulation with actual lab measurement calls when available.

objective_name = "photovoltaic_efficiency"


def evaluate_photovoltaic_process(annealing_temperature_c: float, deposition_rate_nm_s: float) -> dict:
    """Simulate photovoltaic efficiency measurement.

    TODO: Replace this simulation with actual experimental measurement logic.
    For real experiments, this function should:
      - Run the annealing and deposition process at the given settings
      - Measure the photovoltaic efficiency (%) on the resulting device
      - Return a dict { "photovoltaic_efficiency": (mean_value, standard_error) }

    The simulator below creates a plausible landscape with:
      - Peak efficiency near 430 C anneal and ~1.1 nm/s deposition rate
      - Additional mild structure to mimic process interactions
      - Additive Gaussian noise to represent measurement uncertainty
    """
    T = annealing_temperature_c
    R = deposition_rate_nm_s

    # Primary peak around (T_opt=430 C, R_opt=1.1 nm/s)
    peak = 13.5 * np.exp(-0.5 * ((T - 430.0) / 60.0) ** 2) * np.exp(
        -0.5 * (np.log(R / 1.1) / 0.35) ** 2
    )

    # Mild interaction ridge that decays away from R ~ 2.5 nm/s
    ridge = 1.2 * np.sin(0.015 * T) * np.exp(-0.5 * ((R - 2.5) / 1.2) ** 2)

    # Baseline performance and soft penalties outside practical windows
    baseline = 10.0
    low_T_penalty = -1.0 * np.exp(-0.5 * ((T - 200.0) / 40.0) ** 2)
    high_T_penalty = -1.5 * np.exp(-0.5 * ((T - 560.0) / 25.0) ** 2)

    true_efficiency = baseline + peak + ridge + low_T_penalty + high_T_penalty

    # Add measurement noise (representative of lab variability)
    noise = np.random.normal(loc=0.0, scale=0.3)
    measured_efficiency = float(np.clip(true_efficiency + noise, 0.0, 30.0))

    # Report a small SEM to inform the GP of observation noise
    sem = 0.25

    return {objective_name: (measured_efficiency, sem)}


# For reproducibility of the simulated noise
np.random.seed(42)

ax_client = AxClient()

ax_client.create_experiment(
    parameters=[
        {
            "name": "annealing_temperature_c",
            "type": "range",
            "bounds": [150.0, 550.0],  # Celsius
        },
        {
            "name": "deposition_rate_nm_s",
            "type": "range",
            "bounds": [0.05, 5.0],  # nm/s
        },
    ],
    objectives={
        objective_name: ObjectiveProperties(minimize=False),
    },
)


total_trials = 25
for _ in range(total_trials):
    parameterization, trial_index = ax_client.get_next_trial()

    annealing_temperature_c = float(parameterization["annealing_temperature_c"])
    deposition_rate_nm_s = float(parameterization["deposition_rate_nm_s"])

    results = evaluate_photovoltaic_process(
        annealing_temperature_c=annealing_temperature_c,
        deposition_rate_nm_s=deposition_rate_nm_s,
    )
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

best_parameters, metrics = ax_client.get_best_parameters()
print("Best settings found:")
print(best_parameters)
print("Observed best objective:")
print(metrics)


# Plot results
objective_list = ax_client.objective_names
df = ax_client.get_trials_data_frame()

y_series = df[objective_list[0]]
fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
ax.scatter(df.index, y_series, ec="k", fc="none", label="Observed")
ax.plot(
    df.index,
    np.maximum.accumulate(y_series),
    color="#0033FF",
    lw=2,
    label="Best to Trial",
)
ax.set_xlabel("Trial Number")
ax.set_ylabel(f"{objective_list[0]} (%)")
ax.set_title("Photovoltaic Efficiency Optimization")
ax.legend()
plt.tight_layout()
plt.show()
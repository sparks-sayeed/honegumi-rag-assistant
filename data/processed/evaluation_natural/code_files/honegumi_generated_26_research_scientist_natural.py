# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


# Domain: Optimize cure conditions (temperature, hold time) to maximize composite tensile strength (MPa)
objective_name = "composite_strength_mpa"
param_temp = "cure_temperature_celsius"
param_time = "cure_hold_time_minutes"


def simulate_composite_strength(cure_temperature_celsius: float, cure_hold_time_minutes: float, rng: np.random.Generator | None = None) -> dict[str, float]:
    """
    Simulated evaluation of composite tensile strength (MPa) as a function of cure temperature and hold time.

    Model assumptions:
    - Degree of cure follows first-order Arrhenius kinetics: alpha = 1 - exp(-k(T)*t)
    - Strength grows with degree of cure (saturating power law).
    - Overcure (too hot / too long) induces thermal/oxidative degradation penalties.
    - Additive experimental noise is included to reflect measurement/process variability.

    Inputs:
      - cure_temperature_celsius: Cure temperature in Celsius (typical epoxy range: 120-200 C)
      - cure_hold_time_minutes: Isothermal hold time at cure temperature in minutes (30-240 min)

    Output:
      - dict with key "composite_strength_mpa" and a float value (higher is better).
    """
    if rng is None:
        rng = np.random.default_rng()

    # Kinetics parameters (tuned for reasonable variation over the chosen ranges)
    R = 8.314  # J/(mol*K)
    Ea = 60000.0  # J/mol, effective activation energy
    A = 1e3  # 1/s, pre-exponential factor (reduced vs. typical to spread alpha over minutes-hours)

    # Convert and compute degree of cure
    T_c = float(cure_temperature_celsius)
    t_min = float(cure_hold_time_minutes)
    T_K = T_c + 273.15
    t_s = max(0.0, t_min) * 60.0

    k_T = A * np.exp(-Ea / (R * T_K))  # 1/s
    alpha = 1.0 - np.exp(-k_T * t_s)
    alpha = float(np.clip(alpha, 0.0, 1.0))

    # Strength model
    S_max = 1000.0  # MPa, nominal maximum achievable tensile strength at ideal cure
    strength_from_cure = S_max * (alpha ** 0.6)  # concave saturating function of cure extent

    # Degradation penalties for overcure (too hot / too long)
    over_temp = max(0.0, T_c - 190.0) / 20.0  # normalized beyond 190 C
    over_time = max(0.0, t_min - 180.0) / 120.0  # normalized beyond 180 min
    degradation = 120.0 * (over_temp ** 2) + 80.0 * (over_time ** 2) + 40.0 * over_temp * over_time

    # Aggregate nominal strength and add measurement/process noise
    nominal_strength = strength_from_cure - degradation
    noise_sd = 20.0  # MPa, typical specimen-to-specimen and measurement variability
    measured_strength = float(nominal_strength + rng.normal(0.0, noise_sd))
    measured_strength = float(max(0.0, measured_strength))  # strengths cannot be negative

    return {objective_name: measured_strength}


# Set random seed for reproducibility of the simulated experiments
rng = np.random.default_rng(42)

ax_client = AxClient()

ax_client.create_experiment(
    parameters=[
        {"name": param_temp, "type": "range", "bounds": [120.0, 200.0]},   # Celsius
        {"name": param_time, "type": "range", "bounds": [30.0, 240.0]},    # Minutes
    ],
    objectives={
        objective_name: ObjectiveProperties(minimize=False),
    },
    experiment_type="cure_optimization",
)

# Plan 22-specimen study (22 trials)
N_TRIALS = 22
for _ in range(N_TRIALS):
    parameterization, trial_index = ax_client.get_next_trial()

    # Extract Ax-suggested parameters
    temp_c = float(parameterization[param_temp])
    hold_min = float(parameterization[param_time])

    # Run the (simulated) experiment and complete the trial with observed data
    results = simulate_composite_strength(temp_c, hold_min, rng=rng)
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

best_parameters, best_metrics = ax_client.get_best_parameters()

# Print best found conditions and strength
print("Best cure conditions found:")
print(best_parameters)
print("Observed best composite strength (MPa):")
print(best_metrics)

# Plot results
df = ax_client.get_trials_data_frame()
# Expected columns include: ['trial_index', 'arm_name', 'metric_name', 'mean', 'sem', ..., parameter columns]
df_strength = df[df["metric_name"] == objective_name].copy()
df_strength.sort_values("trial_index", inplace=True)

trial_numbers = df_strength["trial_index"].to_numpy()
observed_means = df_strength["mean"].to_numpy(dtype=float)

best_so_far = np.maximum.accumulate(observed_means)

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
ax.scatter(trial_numbers, observed_means, ec="k", fc="none", label="Observed")
ax.plot(trial_numbers, best_so_far, color="#0033FF", lw=2, label="Best to Trial")
ax.set_xlabel("Trial Number")
ax.set_ylabel("Composite Strength (MPa)")
ax.set_title("Optimization of Cure Conditions for Composite Strength")
ax.legend()
plt.tight_layout()
plt.show()
# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


# Reproducibility for the simulated evaluation
np.random.seed(42)

# Domain-specific names
OBJECTIVE_NAME = "oxygen_transmission_rate"  # minimize (e.g., cc/m^2/day)


def evaluate_oxygen_barrier(film_thickness_microns: float, coating_type: str) -> float:
    """
    Simulate oxygen transmission rate (OTR) as a function of film thickness and coating.

    This stub provides a physically motivated simulation:
    - OTR decreases roughly inversely with thickness: OTR ~ k / thickness
    - Each coating reduces OTR via a multiplicative barrier_factor and adds a floor (defect-limited)
    - Very thin films (< ~15 µm) incur pinhole/defect penalties, raising OTR
    - Adds measurement noise to reflect real experimental variability

    Replace this stub with actual lab measurements or a validated physics-based model as needed.
    """
    # Coating-specific barrier parameters (illustrative but plausible)
    # barrier_factor < 1 reduces permeation; floor is a defect-limited asymptote
    coating_params = {
        "none": {"barrier_factor": 1.00, "floor": 8.0},
        "PVOH": {"barrier_factor": 0.35, "floor": 3.0},
        "EVOH": {"barrier_factor": 0.25, "floor": 2.0},
        "PVDC": {"barrier_factor": 0.20, "floor": 1.5},
        "SiOx": {"barrier_factor": 0.10, "floor": 0.8},
    }

    if coating_type not in coating_params:
        raise ValueError(f"Unknown coating_type: {coating_type}")

    params = coating_params[coating_type]

    # Base constant governing thickness dependence for the substrate polymer
    # Chosen to yield OTR ~150 cc/m^2/day at 20 µm without coating.
    k_base = 2800.0

    # Avoid unrealistic explosion at ultra-thin thickness by clamping denominator
    thickness_eff = max(film_thickness_microns, 5.0)

    # Core model: floor + barrier_factor * (k_base / thickness)
    otr_mean = params["floor"] + params["barrier_factor"] * (k_base / thickness_eff)

    # Extra penalty for very thin films due to pinholes/defects
    if film_thickness_microns < 15.0:
        pinhole_penalty = 0.6 * (15.0 - film_thickness_microns) ** 1.4
        otr_mean += pinhole_penalty

    # Heteroscedastic measurement noise: more noise when OTR is high
    noise_std = 0.05 * otr_mean + 0.2  # 5% relative + small absolute noise
    noise = np.random.normal(loc=0.0, scale=noise_std)

    otr_measured = max(0.05, float(otr_mean + noise))  # enforce non-negative lower bound
    return otr_measured


ax_client = AxClient()

ax_client.create_experiment(
    name="oxygen_barrier_optimization",
    parameters=[
        {
            "name": "film_thickness_microns",
            "type": "range",
            "bounds": [10.0, 200.0],  # typical packaging film thickness range
        },
        {
            "name": "coating_type",
            "type": "choice",
            "is_ordered": False,
            "values": ["none", "PVOH", "EVOH", "PVDC", "SiOx"],
        },
    ],
    objectives={
        OBJECTIVE_NAME: ObjectiveProperties(minimize=True),
    },
    # By default Ax assumes noisy observations; we provide noisy measurements in the evaluator.
)

# Run planned budget of 24 trials
for _ in range(24):
    parameterization, trial_index = ax_client.get_next_trial()

    # Extract parameters from Ax
    film_thickness_microns = float(parameterization["film_thickness_microns"])
    coating_type = str(parameterization["coating_type"])

    # Evaluate objective (simulated here; replace with real measurement)
    otr_value = evaluate_oxygen_barrier(film_thickness_microns, coating_type)

    # Report result back to Ax (single noisy objective)
    ax_client.complete_trial(trial_index=trial_index, raw_data=otr_value)

best_parameters, best_metrics = ax_client.get_best_parameters()

# Plot results over trials
objective_names = ax_client.objective_names
df = ax_client.get_trials_data_frame()

fig, ax = plt.subplots(figsize=(7, 4), dpi=150)
ax.scatter(df.index, df[objective_names], ec="k", fc="none", label="Observed OTR")
ax.plot(
    df.index,
    np.minimum.accumulate(df[objective_names]),
    color="#0033FF",
    lw=2,
    label="Best-so-far (min)",
)
ax.set_xlabel("Trial Number")
ax.set_ylabel(objective_names[0])
ax.set_title("Oxygen Transmission Rate vs Trial")
ax.legend()
plt.tight_layout()
plt.show()

# Additional visualization: OTR vs Thickness colored by Coating
fig2, ax2 = plt.subplots(figsize=(7, 4), dpi=150)
for coating in df["coating_type"].unique():
    sub = df[df["coating_type"] == coating]
    ax2.scatter(
        sub["film_thickness_microns"],
        sub[OBJECTIVE_NAME],
        label=coating,
        alpha=0.8,
        edgecolor="k",
    )
ax2.set_xlabel("Film Thickness (µm)")
ax2.set_ylabel("Oxygen Transmission Rate")
ax2.set_title("OTR vs Film Thickness by Coating")
ax2.legend(title="Coating")
plt.tight_layout()
plt.show()
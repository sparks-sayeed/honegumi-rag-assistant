# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


# Domain-specific configuration for spray coating uniformity optimization
objective_name = "thickness_variation_percent"  # Lower is better (minimize)
rng = np.random.default_rng(seed=12345)  # Reproducible noise for simulated measurements


def evaluate_spray_coating_uniformity(distance_mm: float, atomizing_pressure_bar: float) -> dict:
    """
    Simulated evaluation of coating thickness uniformity (single pass over a 200 mm panel).
    Objective is the coefficient of variation (std/mean) of thickness across the panel, in percent.

    This is a realistic stub intended to be replaced with actual measurements:
    - Replace the simulation below with a call to your lab's data acquisition system.
    - Compute thickness_variation_percent from measured thickness map across the panel.
    - If you can estimate measurement uncertainty (SEM), return it; otherwise a float is acceptable.

    Parameters
    ----------
    distance_mm : float
        Nozzle-to-substrate standoff distance in millimeters (typical: 100–300 mm).
    atomizing_pressure_bar : float
        Atomizing air pressure at the spray gun in bar (typical: 0.8–2.5 bar).

    Returns
    -------
    dict
        Mapping from metric name to (mean, sem).
        Example: {"thickness_variation_percent": (observed_value, sem)}
    """
    # Panel and discretization
    half_panel_width_mm = 100.0  # Evaluate uniformity across a 200 mm span centered under the gun
    x = np.linspace(-half_panel_width_mm, half_panel_width_mm, 1001)

    # Model the spray deposition profile as a Gaussian fan shaped by distance and pressure.
    # Wider sigma -> flatter profile across panel. Sigma increases with distance and somewhat with pressure.
    base_sigma = 0.35 * distance_mm
    pressure_shape_factor = 1.0 + 0.25 * (atomizing_pressure_bar - 1.6)
    sigma_mm = np.clip(base_sigma * pressure_shape_factor, 10.0, 150.0)

    # Mass flow increases with pressure (simplified). We keep integral under the curve ~ flow.
    flow = np.clip(1.0 + 0.6 * (atomizing_pressure_bar - 1.6), 0.4, 1.8)
    A = flow / (np.sqrt(2.0 * np.pi) * sigma_mm)  # Amplitude to conserve integrated deposition

    thickness = A * np.exp(-0.5 * (x / sigma_mm) ** 2)

    # Base coefficient of variation across the panel (in %)
    mean_thk = np.mean(thickness)
    std_thk = np.std(thickness)
    cv_percent_base = 100.0 * (std_thk / mean_thk)

    # Penalize regimes known to worsen uniformity (heuristics):
    # - Too close (wet center, narrow fan)
    penalty_close = 4.0 * max(0.0, (180.0 - distance_mm) / 30.0) ** 2
    # - Too far (dry spray, edge thinning)
    penalty_far = 3.0 * max(0.0, (distance_mm - 260.0) / 40.0) ** 2
    # - Too low pressure (large droplets, mottling)
    penalty_low_p = 5.0 * max(0.0, 1.1 - atomizing_pressure_bar) ** 2
    # - Excessive pressure (bounce-back, overspray)
    penalty_high_p = 2.0 * max(0.0, atomizing_pressure_bar - 2.2) ** 2

    cv_percent = cv_percent_base + penalty_close + penalty_far + penalty_low_p + penalty_high_p

    # Add realistic measurement noise; SEM reflects repeatability uncertainty
    noise_sd = 0.30 + 0.20 * abs(atomizing_pressure_bar - 1.7) + 0.20 * abs(distance_mm - 220.0) / 80.0
    observed_value = max(0.05, cv_percent + rng.normal(0.0, noise_sd))
    sem = noise_sd

    return {objective_name: (float(observed_value), float(sem))}


ax_client = AxClient()

# Define the optimization experiment: minimize thickness variation by tuning distance and pressure
ax_client.create_experiment(
    parameters=[
        {"name": "distance_mm", "type": "range", "bounds": [100.0, 300.0]},
        {"name": "atomizing_pressure_bar", "type": "range", "bounds": [0.8, 2.5]},
    ],
    objectives={
        objective_name: ObjectiveProperties(minimize=True),
    },
)

# Run optimization for the specified budget (25 trials, sequential)
budget = 25
for _ in range(budget):
    parameterization, trial_index = ax_client.get_next_trial()

    # Extract parameters
    distance_mm = float(parameterization["distance_mm"])
    atomizing_pressure_bar = float(parameterization["atomizing_pressure_bar"])

    # Evaluate the process (replace this simulation with actual measurements in production)
    results = evaluate_spray_coating_uniformity(distance_mm, atomizing_pressure_bar)

    # Report results back to Ax
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

# Retrieve best found settings
best_parameters, best_objective = ax_client.get_best_parameters()
print("Best settings found:")
print(best_parameters)
print("Best objective:")
print(best_objective)

# Plot results
df = ax_client.get_trials_data_frame()
y = df[objective_name].astype(float)
x = df["trial_index"].astype(int)

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
ax.scatter(x, y, ec="k", fc="none", label="Observed")
ax.plot(x, np.minimum.accumulate(y), color="#0033FF", lw=2, label="Best to Trial")
ax.set_xlabel("Trial Number")
ax.set_ylabel("Thickness Variation (%)")
ax.set_title("Spray Coating Uniformity Optimization")
ax.legend()
plt.tight_layout()
plt.show()
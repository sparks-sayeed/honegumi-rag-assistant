# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


# Domain-specific metric and parameter names
metric_name_otr = "oxygen_transmission_rate"  # cc/m^2/day @ 23C

# Global RNG for reproducibility of the simulated measurement noise
_rng = np.random.default_rng(2025)


def measure_oxygen_transmission_rate(
    film_thickness_microns: float,
    coating_weight_g_m2: float,
) -> float:
    """
    Simulated measurement of oxygen transmission rate (OTR) for a packaged food film.

    This surrogate captures typical trends:
    - Increasing film thickness generally reduces OTR (diffusion path length).
    - Barrier coating lowers OTR multiplicatively up to a point.
    - Excessive coating weight can introduce defects (cracking), increasing OTR.
    - Very thin films incur pinhole/defect penalties.

    Returns a single noisy measurement to emulate experimental noise.
    Units: cc/m^2/day @ 23C
    """
    # Base permeability scaling with thickness (microns)
    thickness = max(film_thickness_microns, 1.0)
    base_otr = 1200.0 / thickness  # ~40 at 30 µm, ~10 at 120 µm

    # Multiplicative barrier improvement from coating
    cw = max(coating_weight_g_m2, 0.0)
    barrier_factor = np.exp(-0.55 * cw)  # diminishing returns with higher coat weight

    # Defect penalties:
    # - Thin film pinhole risk (rapidly grows when thickness < ~40 µm)
    pinhole_penalty = 2000.0 / (thickness**3)
    # - Over-coating cracking risk after ~3.5 g/m^2
    overcoat_penalty = 0.6 * max(cw - 3.5, 0.0) ** 2

    true_otr = base_otr * barrier_factor + pinhole_penalty + overcoat_penalty
    true_otr = float(np.clip(true_otr, 0.05, None))

    # Add experimental measurement noise (unknown to the model)
    rel_noise = 0.06  # ~6% RSD
    measured_otr = float(true_otr * (1.0 + _rng.normal(0.0, rel_noise)))

    return measured_otr


# Configure Ax optimization client
ax_client = AxClient()

# Create experiment with problem-specific parameters and single objective to minimize
ax_client.create_experiment(
    parameters=[
        {
            "name": "film_thickness_microns",
            "type": "range",
            "bounds": [25.0, 120.0],  # micrometers
        },
        {
            "name": "coating_weight_g_m2",
            "type": "range",
            "bounds": [0.5, 5.0],  # grams per square meter
        },
    ],
    objectives={
        metric_name_otr: ObjectiveProperties(minimize=True),
    },
)

# Run optimization for the available budget of 24 experimental samples
num_trials = 24
for _ in range(num_trials):
    parameterization, trial_index = ax_client.get_next_trial()

    # Extract parameters
    film_thickness = float(parameterization["film_thickness_microns"])
    coating_weight = float(parameterization["coating_weight_g_m2"])

    # Evaluate OTR (simulate measurement)
    otr_value = measure_oxygen_transmission_rate(
        film_thickness_microns=film_thickness,
        coating_weight_g_m2=coating_weight,
    )

    # Report measurement (unknown noise; provide only observed value)
    ax_client.complete_trial(trial_index=trial_index, raw_data=otr_value)

# Retrieve best found parameters and associated metric
best_parameters, best_metrics = ax_client.get_best_parameters()
best_otr = best_metrics[metric_name_otr]["mean"]
print("Best parameters found:")
print(best_parameters)
print(f"Best observed oxygen transmission rate: {best_otr:.3f} cc/m^2/day @ 23C")

# Plot results
objective_names = ax_client.objective_names
df = ax_client.get_trials_data_frame()

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
ax.scatter(df.index, df[objective_names], ec="k", fc="none", label="Observed")
ax.plot(
    df.index,
    np.minimum.accumulate(df[objective_names]),
    color="#0033FF",
    lw=2,
    label="Best to Trial",
)
ax.set_xlabel("Trial Number")
ax.set_ylabel(f"{objective_names[0]} (cc/m^2/day @ 23C)")
ax.set_title("Optimization of Film Thickness and Coating Weight for Low OTR")
ax.legend()
plt.tight_layout()
plt.show()
# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


# Domain: Optimize composite panel curing process (temperature, time) to maximize tensile strength.
# Budget: 22 panels (trials), batch size: 1, noisy measurements.

OBJECTIVE_NAME = "strength_mpa"
PARAM_TEMPERATURE = "cure_temperature_celsius"
PARAM_TIME = "cure_time_minutes"

rng = np.random.default_rng(0)  # For reproducibility of simulated measurement noise


def evaluate_panel_strength(cure_temperature_celsius: float, cure_time_minutes: float) -> dict:
    """
    Simulated evaluation of composite panel tensile strength (MPa) given cure temperature and time.

    This stub models:
    - Cure kinetics via a simple Arrhenius rate to estimate degree of cure alpha(t, T)
    - Strength increases with degree of cure and then saturates
    - Over-curing at high temperature/time causes degradation
    - Adds Gaussian measurement noise to reflect experimental variability

    Replace the simulated model and noise with actual experimental measurement.
    """
    # --- Cure kinetics (Arrhenius-like, very simplified) ---
    # Units: temperature in Celsius (converted to Kelvin), time in minutes
    T_K = cure_temperature_celsius + 273.15
    t_min = cure_time_minutes

    # Arrhenius parameters tuned for reasonable dynamics across 120-200 C and 30-180 min
    R = 8.314  # J/mol-K
    Ea = 60_000.0  # J/mol
    A = 1.0e6  # 1/min

    k = A * np.exp(-Ea / (R * T_K))  # 1/min
    alpha = 1.0 - np.exp(-k * t_min)  # degree of cure in [0, 1)
    alpha = np.clip(alpha, 0.0, 1.0)

    # --- Strength model (saturating with degree of cure) ---
    # Saturation curve: mix linear and sqrt to provide diminishing returns near full cure
    cure_factor = 0.8 * alpha + 0.2 * np.sqrt(alpha)

    # --- Degradation model for high temperature and prolonged time ---
    # Penalize excessive thermal exposure (higher T and longer duration)
    # 1) High temperature soft penalty (starts > ~185 C)
    temp_penalty = 0.12 / (1.0 + np.exp(-(cure_temperature_celsius - 185.0) / 3.0))  # up to ~12%

    # 2) Time-at-temperature penalty for very long cures at high temps
    highT_excess = max(0.0, cure_temperature_celsius - 180.0)
    time_penalty = 0.10 * np.clip((t_min * highT_excess) / 600.0, 0.0, 1.0)  # up to ~10%

    degradation_factor = 1.0 - (temp_penalty + time_penalty)
    degradation_factor = np.clip(degradation_factor, 0.75, 1.0)  # cap degradation to avoid negative strengths

    # --- Nominal maximum strength and final strength computation ---
    S_max = 800.0  # MPa, representative for a high-performance composite
    strength_mean = S_max * cure_factor * degradation_factor

    # Additive measurement noise (simulate lab variability)
    noise_sd = 8.0  # MPa standard deviation
    measured_strength = float(strength_mean + rng.normal(0.0, noise_sd))

    # Return dict with (mean, SEM). If you perform n repeats, SEM = sd / sqrt(n). Here assume single shot so SEM ~ sd.
    return {
        OBJECTIVE_NAME: (measured_strength, noise_sd)
    }


ax_client = AxClient()

ax_client.create_experiment(
    name="composite_cure_strength_optimization",
    parameters=[
        {
            "name": PARAM_TEMPERATURE,
            "type": "range",
            "bounds": [120.0, 200.0],  # Celsius
        },
        {
            "name": PARAM_TIME,
            "type": "range",
            "bounds": [30.0, 180.0],  # Minutes
        },
    ],
    objectives={
        OBJECTIVE_NAME: ObjectiveProperties(minimize=False),
    },
)

# Run optimization for the available budget (22 panels)
TOTAL_TRIALS = 22
for _ in range(TOTAL_TRIALS):
    parameterization, trial_index = ax_client.get_next_trial()

    # Extract domain parameters
    cure_temperature_celsius = float(parameterization[PARAM_TEMPERATURE])
    cure_time_minutes = float(parameterization[PARAM_TIME])

    # Evaluate panel strength (replace this with actual lab measurement)
    results = evaluate_panel_strength(cure_temperature_celsius, cure_time_minutes)

    # Report results back to Ax
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

best_parameters, best_metrics = ax_client.get_best_parameters()

print("Best parameters found:")
print(best_parameters)
print("Best predicted outcome:")
print(best_metrics)

# Plot results
df = ax_client.get_trials_data_frame()
objective_col = OBJECTIVE_NAME

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
ax.scatter(df.index, df[objective_col], ec="k", fc="none", label="Observed")
ax.plot(
    df.index,
    np.maximum.accumulate(df[objective_col]),
    color="#0033FF",
    lw=2,
    label="Best to Trial",
)
ax.set_xlabel("Trial Number")
ax.set_ylabel("Tensile Strength (MPa)")
ax.set_title("Composite Cure Optimization (maximize strength)")
ax.legend()
plt.tight_layout()
plt.show()
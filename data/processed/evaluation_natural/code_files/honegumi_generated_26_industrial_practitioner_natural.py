# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


# Problem: Optimize composite laminate cure cycle (temperature and hold time)
# Objective: Maximize tensile strength (MPa)
# Budget: 22 sequential trials (batch size = 1)
# Notes:
# - This script uses a physically-inspired simulator to mimic curing behavior with noise.
# - Replace `simulate_tensile_strength_mpa` with actual lab/production measurement logic when available.

R_GAS_CONSTANT = 8.314  # J/(mol*K), universal gas constant
np.random.seed(42)  # For reproducibility of the simulated measurements


def simulate_tensile_strength_mpa(temperature_celsius: float, hold_time_minutes: float) -> float:
    """
    Simulate tensile strength (MPa) for a composite laminate after curing at a given temperature and time.

    Model assumptions (stylized but realistic):
    - Cure kinetics follow an Arrhenius rate: k(T) = A * exp(-Ea / (R * T))
    - Degree of cure alpha = 1 - exp(-k * t), with time t in seconds
    - Tensile strength scales with degree of cure, up to S_max
    - Excessively high temperature or excessive hold time introduce thermal degradation penalties
    - Measurement noise is added to reflect experimental variability

    Parameters:
    - temperature_celsius: Autoclave temperature in Celsius (typical epoxy cure window: 120-190 C)
    - hold_time_minutes: Hold time at temperature in minutes (typical: 30-180 min)

    Returns:
    - Simulated measured tensile strength in MPa (float)
    """
    # Convert to Kelvin and seconds
    T_kelvin = temperature_celsius + 273.15
    t_seconds = max(hold_time_minutes, 0.0) * 60.0

    # Arrhenius cure kinetics (stylized parameters for epoxy systems)
    A_prefactor = 1.0e5  # 1/s
    Ea_j_per_mol = 60_000.0  # J/mol
    k = A_prefactor * np.exp(-Ea_j_per_mol / (R_GAS_CONSTANT * T_kelvin))

    # Degree of cure (bounded in [0, 1])
    alpha = 1.0 - np.exp(-k * t_seconds)
    alpha = float(np.clip(alpha, 0.0, 1.0))

    # Base strength scales with degree of cure
    S_max = 750.0  # MPa, representative upper range for high-performance CFRP tensile strength (fiber-dominated)
    strength_base = S_max * alpha

    # Thermal degradation penalty:
    # Penalize temperatures above 180 C and times above 150 min; the penalty increases with exceedance
    temp_excess = max(0.0, temperature_celsius - 180.0)
    time_excess = max(0.0, hold_time_minutes - 150.0)
    # Convert exceedance into an exponential decay factor
    degradation_factor = np.exp(-(temp_excess / 15.0 + time_excess / 30.0))

    # Mild penalty for too low temperature relative to a soft-optimum around 160 C
    # This helps balance Arrhenius monotonicity with practical process constraints
    temp_under_opt = max(0.0, 160.0 - temperature_celsius)
    process_penalty = np.exp(- (temp_under_opt / 25.0))

    # Combine effects
    strength_noise_free = strength_base * degradation_factor * process_penalty

    # Add measurement noise (simulate instrument/layup variability)
    measurement_noise_std = 20.0  # MPa
    measured_strength = float(np.random.normal(strength_noise_free, measurement_noise_std))

    # Floor and cap to reasonable bounds
    measured_strength = float(np.clip(measured_strength, 50.0, 900.0))
    return measured_strength


def evaluate_cure_cycle(temperature_celsius: float, hold_time_minutes: float) -> dict:
    """
    Evaluate the cure cycle by returning the objective metric with an associated SEM (noise model).
    Replace this with actual experimental measurement when integrating with the lab.

    Returns:
      {
        "tensile_strength_mpa": (mean_value, sem_value)
      }
    """
    measured_strength = simulate_tensile_strength_mpa(temperature_celsius, hold_time_minutes)

    # If actual experiments provide replicate measurements, compute SEM accordingly.
    # Here, we pass a fixed SEM representative of measurement uncertainty.
    sem_estimate = 20.0  # MPa

    return {"tensile_strength_mpa": (measured_strength, sem_estimate)}


# Configure Ax optimization
ax_client = AxClient()

ax_client.create_experiment(
    name="composite_cure_cycle_optimization",
    parameters=[
        {
            "name": "temperature_celsius",
            "type": "range",
            "bounds": [120.0, 190.0],  # Typical epoxy cure window
        },
        {
            "name": "hold_time_minutes",
            "type": "range",
            "bounds": [30.0, 180.0],  # Practical autoclave hold times
        },
    ],
    objectives={
        "tensile_strength_mpa": ObjectiveProperties(minimize=False),
    },
    # No additional constraints specified
    overwrite_existing_experiment=True,
)

# Run the optimization for the specified budget
budget_trials = 22
for _ in range(budget_trials):
    parameterization, trial_index = ax_client.get_next_trial()

    # Extract parameters
    temperature_celsius = float(parameterization["temperature_celsius"])
    hold_time_minutes = float(parameterization["hold_time_minutes"])

    # Evaluate and report results with noise model (mean, sem)
    results = evaluate_cure_cycle(temperature_celsius, hold_time_minutes)
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

# Best found parameters and corresponding objective
best_parameters, best_metrics = ax_client.get_best_parameters()
best_strength = best_metrics["tensile_strength_mpa"][0]  # Mean value

print("Best cure cycle found:")
print(f"  Temperature (C): {best_parameters['temperature_celsius']:.2f}")
print(f"  Hold time (min): {best_parameters['hold_time_minutes']:.2f}")
print(f"  Expected tensile strength (MPa): {best_strength:.2f}")

# Plot results: Observed strengths and best-so-far (cumulative max)
objective_name = ax_client.objective_names[0]
df = ax_client.get_trials_data_frame()

# Extract series safely
y = df[objective_name].to_numpy()
x = np.arange(len(y))
best_so_far = np.maximum.accumulate(y)

fig, ax = plt.subplots(figsize=(7, 4), dpi=150)
ax.scatter(x, y, ec="k", fc="none", label="Observed tensile strength")
ax.plot(x, best_so_far, color="#0033FF", lw=2, label="Best so far")
ax.set_xlabel("Trial number")
ax.set_ylabel("Tensile strength (MPa)")
ax.set_title("Composite Cure Cycle Optimization (Ax)")
ax.legend()
plt.tight_layout()
plt.show()

# Optional: visualize parameter traces colored by outcome
fig2, ax2 = plt.subplots(1, 2, figsize=(10, 4), dpi=150)
ax2[0].scatter(df["temperature_celsius"], y, alpha=0.8)
ax2[0].set_xlabel("Temperature (C)")
ax2[0].set_ylabel("Tensile strength (MPa)")
ax2[0].set_title("Strength vs Temperature")

ax2[1].scatter(df["hold_time_minutes"], y, alpha=0.8)
ax2[1].set_xlabel("Hold time (min)")
ax2[1].set_ylabel("Tensile strength (MPa)")
ax2[1].set_title("Strength vs Hold Time")

plt.tight_layout()
plt.show()
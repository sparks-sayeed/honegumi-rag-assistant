# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


# Domain-specific evaluation: ceramic sintering density vs. temperature and time.
def evaluate_sintering_density(temperature_celsius: float, time_hours: float) -> float:
    """
    Simulate density (percent of theoretical) for a ceramic sintering run.

    This deterministic, noise-free stub captures typical sintering behavior:
    - Densification accelerates with temperature (Arrhenius) and time (1 - exp(-k*t)) and saturates.
    - Very high temperatures can reduce final density due to grain growth/porosity entrapment (penalty).

    Returns:
        Density as percent of theoretical (0-100).
    """
    # Physical-like model parameters
    R_kJ = 8.314e-3  # kJ/(mol*K)
    Ea_kJ_per_mol = 160.0  # apparent activation energy
    A_per_hour = 4.0e6  # pre-exponential factor, tuned for 1-6h and 800-1200C ranges

    T_K = temperature_celsius + 273.15
    # Arrhenius rate constant [1/hour]
    k_per_hour = A_per_hour * np.exp(-Ea_kJ_per_mol / (R_kJ * T_K))

    # Time-dependent densification fraction (0 to 1)
    densification = 1.0 - np.exp(-k_per_hour * max(time_hours, 0.0))
    densification = np.clip(densification, 0.0, 1.0)

    # Base relative density ramps from ~60% toward ~100% with densification
    base_rel_density = 0.60 + 0.40 * densification  # fraction of theoretical (0-1)

    # High-temperature penalty for grain growth/porosity entrapment
    # Smoothly activates above ~1125C; max ~12% reduction by ~1200C.
    penalty = 1.0 - 0.12 / (1.0 + np.exp(-(temperature_celsius - 1125.0) / 25.0))

    # Mild shape factor peaking near ~1080C for a more realistic interior optimum
    shape_peak = 0.97 + 0.03 * np.exp(-0.5 * ((temperature_celsius - 1080.0) / 80.0) ** 2)

    rel_density = np.clip(base_rel_density * penalty * shape_peak, 0.0, 0.999)
    density_percent = 100.0 * rel_density
    return float(density_percent)


if __name__ == "__main__":
    # Optimization setup for ceramic sintering process
    RANDOM_SEED = 12345
    np.random.seed(RANDOM_SEED)

    ax_client = AxClient(random_seed=RANDOM_SEED)
    ax_client.create_experiment(
        name="ceramic_sintering_density_optimization",
        parameters=[
            {"name": "temperature_celsius", "type": "range", "bounds": [800.0, 1200.0]},
            {"name": "time_hours", "type": "range", "bounds": [1.0, 6.0]},
        ],
        objectives={
            "density": ObjectiveProperties(minimize=False),
        },
        overwrite_existing_experiment=True,
    )

    # Budget: 25 sequential trials (measurements assumed noise-free/consistent)
    N_TRIALS = 25
    for i in range(N_TRIALS):
        parameterization, trial_index = ax_client.get_next_trial()

        temperature_celsius = float(parameterization["temperature_celsius"])
        time_hours = float(parameterization["time_hours"])

        density_value = evaluate_sintering_density(temperature_celsius, time_hours)

        # Report a noise-free observation for the "density" metric
        ax_client.complete_trial(
            trial_index=trial_index,
            raw_data={"density": (density_value, 0.0)},
        )

    best_parameters, best_metrics = ax_client.get_best_parameters()

    # Print best found settings and density
    print("Best parameters found:")
    for k, v in best_parameters.items():
        print(f"  {k}: {v:.4f}")
    print("Best observed metrics:")
    for metric_name, metric_dict in best_metrics.items():
        val = metric_dict["mean"]
        sem = metric_dict.get("sem", None)
        if sem is not None:
            print(f"  {metric_name}: {val:.4f} (SEM={sem:.4f})")
        else:
            print(f"  {metric_name}: {val:.4f}")

    # Visualization
    objectives = ax_client.objective_names
    df = ax_client.get_trials_data_frame()

    # Convergence plot (maximize density)
    fig, ax = plt.subplots(figsize=(7, 4), dpi=150)
    y = df[objectives[0]].values
    ax.scatter(df.index, y, ec="k", fc="none", label="Observed")
    ax.plot(df.index, np.maximum.accumulate(y), color="#0033FF", lw=2, label="Best to Trial")
    ax.set_xlabel("Trial Number")
    ax.set_ylabel("Density (percent of theoretical)")
    ax.set_title("Sintering Density Optimization (Convergence)")
    ax.legend()
    plt.tight_layout()
    plt.show()

    # Scatter in parameter space colored by observed density
    if {"arm_parameters.temperature_celsius", "arm_parameters.time_hours", "density"}.issubset(df.columns):
        fig2, ax2 = plt.subplots(figsize=(6, 5), dpi=150)
        sc = ax2.scatter(
            df["arm_parameters.temperature_celsius"],
            df["arm_parameters.time_hours"],
            c=df["density"],
            cmap="viridis",
            s=60,
            edgecolor="k",
        )
        ax2.set_xlabel("Temperature (Â°C)")
        ax2.set_ylabel("Time (hours)")
        ax2.set_title("Trial Locations Colored by Density")
        cbar = plt.colorbar(sc, ax=ax2)
        cbar.set_label("Density (%)")
        plt.tight_layout()
        plt.show()
# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


# Domain-specific objective and evaluation
objective_name = "activity"


def evaluate_catalyst_activity(calcination_temperature_c: float, calcination_time_h: float) -> float:
    """
    Simulated evaluation of catalyst activity as a function of calcination conditions.

    Replace this stub with actual experimental measurement logic, e.g.:
    - Execute the synthesis with the given calcination temperature and time
    - Run the catalytic test and measure activity (e.g., turnover frequency, conversion rate)
    - Return the measured activity as a scalar (larger is better)

    This stub models:
    - An optimal region around ~560°C and ~3.5 h
    - A temperature–time interaction where lower temperature benefits slightly longer time
    - Additive measurement noise to emulate experimental uncertainty
    """
    # Reproducible noise for demonstration; in real experiments remove fixed seed
    rng = np.random.default_rng(2025)

    # Ideal ridge: time optimum shifts mildly with temperature (interaction)
    # Center of peak shifts such that at lower T, longer time helps; at higher T, shorter time suffices.
    time_opt_shift = 3.5 + 0.003 * (560.0 - calcination_temperature_c)  # hours

    # Peak around 560 C and time_opt_shift hours
    # Elliptical hill with moderate curvature; scaled to yield activity ~0..100
    temp_term = -((calcination_temperature_c - 560.0) / 70.0) ** 2
    time_term = -((calcination_time_h - time_opt_shift) / 1.8) ** 2
    interaction_bonus = 0.15 * np.exp(-((calcination_temperature_c - 560.0) / 140.0) ** 2) * np.exp(
        -((calcination_time_h - time_opt_shift) / 3.0) ** 2
    )

    baseline = 20.0  # baseline activity for poor settings
    peak_height = 75.0  # added activity at optimum
    deterministic_activity = baseline + peak_height * np.exp(temp_term + time_term) + 100.0 * interaction_bonus

    # Add measurement/process noise (heteroscedastic: higher near peak)
    noise_sd = 2.0 + 0.03 * deterministic_activity
    noisy_activity = float(deterministic_activity + rng.normal(0.0, noise_sd))

    # Ensure non-negative activity
    return max(0.0, noisy_activity)


# Initialize Ax client and define the experiment
ax_client = AxClient()

ax_client.create_experiment(
    name="catalyst_calcination_optimization",
    parameters=[
        {
            "name": "calcination_temperature_c",
            "type": "range",
            "bounds": [350.0, 700.0],  # degrees Celsius
        },
        {
            "name": "calcination_time_h",
            "type": "range",
            "bounds": [0.5, 8.0],  # hours
        },
    ],
    objectives={
        objective_name: ObjectiveProperties(minimize=False),
    },
    overwrite_existing_experiment=True,
)

# Budget: 25 single-trial iterations
total_trials = 25

for i in range(total_trials):
    parameterization, trial_index = ax_client.get_next_trial()

    # Extract domain-specific parameters
    calcination_temperature_c = parameterization["calcination_temperature_c"]
    calcination_time_h = parameterization["calcination_time_h"]

    # Evaluate experiment (replace with real measurement)
    try:
        activity_value = evaluate_catalyst_activity(calcination_temperature_c, calcination_time_h)
        ax_client.complete_trial(trial_index=trial_index, raw_data=activity_value)
    except Exception as e:
        # Mark failed trial to allow Ax to handle it gracefully
        ax_client.log_trial_failure(trial_index=trial_index)
        print(f"Trial {trial_index} failed with error: {e}")

# Fetch best found parameters
best_parameters, best_metrics = ax_client.get_best_parameters()
print("Best calcination conditions found:")
print(best_parameters)
print("Observed best activity metric:")
print(best_metrics)

# Plot results
objective_names = ax_client.objective_names
assert len(objective_names) == 1
objective_col = objective_names[0]

df = ax_client.get_trials_data_frame()

fig, ax = plt.subplots(figsize=(7, 4), dpi=150)
ax.scatter(df.index, df[objective_col], ec="k", fc="none", label="Observed activity")
ax.plot(
    df.index,
    np.maximum.accumulate(df[objective_col]),
    color="#0033FF",
    lw=2,
    label="Best so far (max)",
)
ax.set_xlabel("Trial number")
ax.set_ylabel("Activity (a.u.)")
ax.set_title("Catalyst activity vs. trial")
ax.legend()
plt.tight_layout()
plt.show()
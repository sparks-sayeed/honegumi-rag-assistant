# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


obj1_name = "branin"
obj2_name = "branin_swapped"


def branin3_moo(x1, x2, x3):
    y = float(
        (x2 - 5.1 / (4 * np.pi**2) * x1**2 + 5.0 / np.pi * x1 - 6.0) ** 2
        + 10 * (1 - 1.0 / (8 * np.pi)) * np.cos(x1)
        + 10
    )

    # Contrived way to incorporate x3 into the objective
    y = y * (1 + 0.1 * x1 * x2 * x3)

    # second objective has x1 and x2 swapped
    y2 = float(
        (x1 - 5.1 / (4 * np.pi**2) * x2**2 + 5.0 / np.pi * x2 - 6.0) ** 2
        + 10 * (1 - 1.0 / (8 * np.pi)) * np.cos(x2)
        + 10
    )

    # Contrived way to incorporate x3 into the second objective
    y2 = y2 * (1 - 0.1 * x1 * x2 * x3)

    return {obj1_name: y, obj2_name: y2}


# Define total for compositional constraint, where x1 + x2 + x3 == total
total = 10.0


ax_client = AxClient()

ax_client.create_experiment(
    parameters=[
        {"name": "x1", "type": "range", "bounds": [0.0, total]},
        {"name": "x2", "type": "range", "bounds": [0.0, total]},
    ],
    objectives={
        obj1_name: ObjectiveProperties(minimize=True),
        obj2_name: ObjectiveProperties(minimize=True),
    },
    parameter_constraints=[
        f"x1 + x2 <= {total}",  # reparameterized compositional constraint, which is a type of sum constraint
    ],
)


for i in range(21):

    parameterization, trial_index = ax_client.get_next_trial()

    # extract parameters
    x1 = parameterization["x1"]
    x2 = parameterization["x2"]
    x3 = total - (x1 + x2)  # composition constraint: x1 + x2 + x3 == total

    results = branin3_moo(x1, x2, x3)
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)
pareto_results = ax_client.get_pareto_optimal_parameters()


# Plot results
objectives = ax_client.objective_names
df = ax_client.get_trials_data_frame()

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
pareto = ax_client.get_pareto_optimal_parameters(use_model_predictions=False)
pareto_data = [p[1][0] for p in pareto.values()]
pareto = pd.DataFrame(pareto_data).sort_values(objectives[0])

ax.scatter(df[objectives[0]], df[objectives[1]], fc="None", ec="k", label="Observed")
ax.plot(
    pareto[objectives[0]],
    pareto[objectives[1]],
    color="#0033FF",
    lw=2,
    label="Pareto Front",
)
ax.set_xlabel(objectives[0])
ax.set_ylabel(objectives[1])

ax.legend()
plt.show()

# Generated for adhesive formulation optimization with Ax Platform
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


# Objective metric names
BOND_STRENGTH = "bond_strength_MPa"  # maximize
CURE_TIME = "cure_time_min"          # minimize

# Composition total for fractions
TOTAL_FRACTION = 1.0

# Reproducibility for the synthetic evaluation stub
np.random.seed(123)


def evaluate_adhesive_formulation(
    resin_A_fraction: float,
    resin_B_fraction: float,
    resin_C_fraction: float,
):
    """
    Synthetic but physically-motivated evaluation of an adhesive formulation
    composed of 3 resins (A, B, C) and a hardener. Fractions sum to 1.0.

    Returns a dict with:
      - bond_strength_MPa: higher is better
      - cure_time_min: lower is better

    NOTE: Replace this stub with actual lab measurements or a validated simulation.
    """
    # Compute hardener fraction from composition constraint
    hardener_fraction = max(0.0, TOTAL_FRACTION - (resin_A_fraction + resin_B_fraction + resin_C_fraction))

    # Resin contributions to base strength (arbitrary but plausible scaling)
    # Assume Resin C and A contribute more to cohesive strength than B.
    base_strength = 20.0 + 60.0 * (
        0.55 * resin_A_fraction + 0.40 * resin_B_fraction + 0.60 * resin_C_fraction
    )

    # Stoichiometry: ideal hardener level shifts with resin mix
    # Assume A needs more hardener, B a bit less; clamp to reasonable range.
    h_opt = 0.28 + 0.10 * resin_A_fraction - 0.05 * resin_B_fraction
    h_opt = float(np.clip(h_opt, 0.12, 0.50))

    # Strength reduction if off-stoichiometry (Gaussian penalty)
    stoich_factor = float(np.exp(-((hardener_fraction - h_opt) / 0.06) ** 2))

    # Synergy and phase behavior: A+C synergy slightly increases strength; excess B can soften the network.
    synergy_factor = 1.0 + 0.15 * resin_A_fraction * resin_C_fraction - 0.10 * resin_B_fraction * (resin_A_fraction + resin_C_fraction)
    synergy_factor = max(0.7, synergy_factor)

    # Compute bond strength (MPa) with noise
    bond_strength = base_strength * stoich_factor * synergy_factor
    bond_strength += np.random.normal(0.0, 1.0)  # measurement/process noise
    bond_strength = float(np.clip(bond_strength, 2.0, 120.0))

    # Cure time model (minutes)
    # Base cure time: A is slower, B is faster, C medium.
    base_time = 25.0 + 100.0 * (0.60 * resin_A_fraction + 0.30 * resin_B_fraction + 0.45 * resin_C_fraction)

    # Hardener reduces cure time when above ~0.25, increases when below.
    hardener_effect = -120.0 * (hardener_fraction - 0.25)

    # Strong penalty for under/over stoichiometry on cure kinetics
    stoich_penalty_time = 70.0 * float(np.exp(((h_opt - hardener_fraction) / 0.07) ** 2))

    # B acts as accelerator; reduce time
    accelerator_effect = -35.0 * resin_B_fraction

    cure_time = base_time + hardener_effect + stoich_penalty_time + accelerator_effect
    cure_time += np.random.normal(0.0, 2.0)  # measurement/process noise
    cure_time = float(np.clip(cure_time, 5.0, 240.0))

    # Return as (mean, SEM). Set SEM=None to indicate unknown noise level.
    return {
        BOND_STRENGTH: (bond_strength, None),
        CURE_TIME: (cure_time, None),
    }


# Create the Ax optimization client
ax_client = AxClient()
ax_client.create_experiment(
    name="adhesive_formulation_moo",
    parameters=[
        {
            "name": "resin_A_fraction",
            "type": "range",
            "bounds": [0.0, TOTAL_FRACTION],
            "value_type": "float",
        },
        {
            "name": "resin_B_fraction",
            "type": "range",
            "bounds": [0.0, TOTAL_FRACTION],
            "value_type": "float",
        },
        {
            "name": "resin_C_fraction",
            "type": "range",
            "bounds": [0.0, TOTAL_FRACTION],
            "value_type": "float",
        },
    ],
    # Reparameterized composition constraint: A + B + C <= 1.0, then hardener = 1 - (A+B+C)
    parameter_constraints=[
        f"resin_A_fraction + resin_B_fraction + resin_C_fraction <= {TOTAL_FRACTION}",
    ],
    objectives={
        BOND_STRENGTH: ObjectiveProperties(minimize=False),
        CURE_TIME: ObjectiveProperties(minimize=True),
    },
    overwrite_existing_experiment=True,
    is_test=True,
)

# Run optimization (budget: 40 trials)
N_TRIALS = 40
for i in range(N_TRIALS):
    params, trial_index = ax_client.get_next_trial()

    # Extract resin fractions; compute hardener for evaluation
    a = float(params["resin_A_fraction"])
    b = float(params["resin_B_fraction"])
    c = float(params["resin_C_fraction"])

    results = evaluate_adhesive_formulation(a, b, c)
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

# Retrieve Pareto-optimal points (observed)
pareto = ax_client.get_pareto_optimal_parameters(use_model_predictions=False)

# Plot observed outcomes and Pareto front
objectives = [BOND_STRENGTH, CURE_TIME]
df = ax_client.get_trials_data_frame()

fig, ax = plt.subplots(figsize=(7, 5), dpi=150)
ax.scatter(
    df[objectives[0]],
    df[objectives[1]],
    fc="None",
    ec="k",
    label="Observed",
)

# Build Pareto front from observed Pareto set
pareto_points = []
for _, (_, metrics) in pareto.items():
    pareto_points.append(
        [metrics[objectives[0]], metrics[objectives[1]]]
    )

if pareto_points:
    pareto_df = pd.DataFrame(pareto_points, columns=objectives).sort_values(objectives[0])
    ax.plot(
        pareto_df[objectives[0]],
        pareto_df[objectives[1]],
        color="#0033FF",
        lw=2,
        label="Pareto Front",
    )

ax.set_xlabel("Bond strength (MPa) — higher is better")
ax.set_ylabel("Cure time (min) — lower is better")
ax.set_title("Adhesive Formulation Optimization (Ax)")
ax.legend()
plt.tight_layout()
plt.show()